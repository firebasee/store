import { Warning } from "@/components/common";
import { ProductCard } from "@/components/product";
import ProductCardSkeleton from "@/components/skeletons/ProductCardSkeleton";
import { getAllProducts } from "@/services/productService";
import { Product } from "@/types";
import { Grid, Pagination } from "@mantine/core";
import { useQuery } from "@tanstack/react-query";
import {
  GetStaticProps,
  GetStaticPropsContext,
  InferGetStaticPropsType,
} from "next";
import Head from "next/head";
import { useState } from "react";

type Props = InferGetStaticPropsType<typeof getStaticProps> & {
  datas: any;
};

export default function Home({ datas }: Props) {
  const [limit, setLimit] = useState(20);
  const [skip, setSkip] = useState(1);
  const { data, isLoading, error, isError } = useQuery({
    queryKey: ["allProducts", limit, skip],
    queryFn: () => getAllProducts(limit, skip),
  });

  if (isError) {
    return <Warning description={(error as any)?.message} />;
  }

  return (
    <>
      <Head>
        <title>Store</title>
        <meta name="description" content="Generated by create store" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Pagination
        total={datas?.total / datas?.limit}
        page={skip}
        onChange={setSkip}
        size="sm"
      />
      <Grid my="md">
        {isLoading
          ? Array(10)
              .fill(undefined)
              .map((_: any, i: number) => (
                <Grid.Col key={i} xs={12} sm={6} md={4} lg={3}>
                  <ProductCardSkeleton />
                </Grid.Col>
              ))
          : data?.products?.map((product: Product) => (
              <Grid.Col key={product.id} xs={12} sm={6} md={4} lg={3}>
                <ProductCard product={product} />
              </Grid.Col>
            ))}
      </Grid>
      <Pagination
        total={datas?.total / datas?.limit}
        page={skip}
        onChange={setSkip}
        size="sm"
      />
    </>
  );
}

export const getStaticProps: GetStaticProps =
  async ({}: GetStaticPropsContext) => {
    const res = await getAllProducts();

    return {
      props: {
        datas: res,
      },
    };
  };
